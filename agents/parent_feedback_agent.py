#!/usr/bin/env python3
"""Parent Feedback Agent (Gemini Flash Lite + local heuristics)

This agent:
- Interprets the JSON output from shooting_drill_feedback.py
- Produces a short, parent-friendly summary using deterministic heuristics
- Optionally sends the draft to a lightweight LLM (Gemini 2.5 Flash Lite)
  for tone polishing, with strict instructions and low token limits

Usage:
  python parent_feedback_agent.py results/drill/foo_drill_feedback.json

Environment:
  GOOGLE_API_KEY (optional). If missing or model fails, falls back to local summary.
"""

from __future__ import annotations

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

from utils.config import load_env
from utils.io import load_json_file
load_env()

# Unified Google GenAI client import
try:
    from google import genai  # type: ignore
    GENAI_AVAILABLE = True
except Exception:
    GENAI_AVAILABLE = False



def load_feedback_json(json_path: Path) -> Dict[str, Any]:
    """Load a drill feedback JSON file using shared utility.

    Args:
        json_path: Path to the JSON file generated by shooting_drill_feedback.py

    Returns:
        Parsed JSON as a Python dict.
    """
    return load_json_file(json_path)


def validate_shot_data(shot: Dict[str, Any]) -> Dict[str, Any]:
    """Validate shot data and mark missing fields as N/A.

    Args:
        shot: One shot dict from the feedback JSON

    Returns:
        A dict with validated fields, N/A for missing data.
    """
    result = {}
    
    # Required fields - use N/A if missing
    result["time"] = shot.get("shot_time_sec", "N/A")
    result["knee_deg"] = shot.get("knee_bend_min_deg", "N/A")
    result["knee_score"] = shot.get("knee_bend_score", "N/A")
    result["knee_valid"] = shot.get("knee_bend_valid", "N/A")
    result["hip_drive"] = shot.get("hip_drive", "N/A")
    result["hip_drive_good"] = shot.get("hip_drive_good", "N/A")
    result["control_smoothness"] = shot.get("control_smoothness", "N/A")
    
    # Stick lift handling
    stick = shot.get("stick_lift", {})
    if stick:
        result["stick_present"] = stick.get("present", "N/A")
        result["stick_time"] = stick.get("first_time_sec", "N/A")
        result["stick_peak"] = stick.get("peak_norm", "N/A")
    else:
        result["stick_present"] = "N/A"
        result["stick_time"] = "N/A"
        result["stick_peak"] = "N/A"
    
    return result


def generate_summary_with_gemini(
    raw: Dict[str, Any],
    model_name: str = "gemini-2.5-flash-lite",
    temperature: float = 0.1,
    max_output_tokens: int = 256,
) -> str:
    """Generate parent-friendly summary using Gemini with strict instructions.

    Returns polished text, or raises an error if fails.
    """
    if not GENAI_AVAILABLE:
        raise RuntimeError("google genai client not available. Install with: pip install google-genai")

    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise RuntimeError("GOOGLE_API_KEY environment variable not set")

    try:
        client = genai.Client(api_key=api_key)
        system = (
            "You are a supportive youth hockey coach. Produce ONLY the per-shot report from the provided drill JSON. "
            "Enhanced form analysis includes: stance_analysis, head_position, upper_body_square, lower_body_triangle. "
            "Rubric: Knee (score) ≥0.7 = good; 0.4–0.69 = moderate; <0.4 = needs work. Hip drive ≥0.3 = good drive. "
            "Wrist steadiness (formerly 'control') labels: ≥0.6 smooth; ≤0.3 jerky; else mixed. "
            "Form metrics (0-1 scale): ≥0.8 excellent; 0.6-0.79 good; 0.4-0.59 fair; <0.4 needs work. "
            "Head position: forward_lean, eye_level, target_facing all measure proper head positioning. "
            "Upper body: shoulder_level, arm_extension, target_alignment measure shooting form 'square'. "
            "Lower body: front_knee_bend_deg (degrees), back_leg_extension_deg (should be 160-180°), stance_width_ratio (wider is fine). "
            "Naming: say 'front knee bend' for front knee, 'hip drive' for hip, 'head position' for head metrics. "
            "Presentation rules: Report FRONT knee bend as degrees only (use front_knee_bend_deg from lower_body_triangle). "
            "For hip drive, include the 0..1 value and good/not good. For wrist steadiness, include only the label (no number). "
            "For head/upper/lower body, mention if excellent (≥0.8) or needs work (<0.6). "
            "Back leg extension: comment if <150° (too bent). If field missing or N/A, say 'not tracked'. "
            "Output format: First line 'N shots detected: times …'; then per-shot bullets like: "
            "'time — front knee bend XXX°, hip drive H.HHH (good/not good), wrist steadiness: LABEL, head position: excellent/good/needs work, back leg: XXX° (too bent if <150°)'. "
            "Do NOT include any other sections (no 'What went well' or 'What to work on'). Keep it concise."
        )

        resp = client.models.generate_content(
            model=model_name,
            contents=[
                {"role": "user", "parts": [{"text": json.dumps(raw)}]},
            ],
            config={
                "system_instruction": system,
                "temperature": temperature,
                "max_output_tokens": max_output_tokens,
            },
        )

        text = (getattr(resp, "text", None) or "").strip()
        if not text:
            raise RuntimeError("Gemini returned empty response")

        return text

    except Exception as e:
        raise RuntimeError(f"Gemini API call failed: {e}")




def save_summary_text(video_or_json: Path, summary: str) -> Path:
    """Save summary next to results JSON under results/drill/ with _summary.txt suffix."""
    stem = video_or_json.stem
    out_dir = Path("results/drill")
    out_dir.mkdir(parents=True, exist_ok=True)
    out_path = out_dir / f"{stem}_summary.txt"
    out_path.write_text(summary)
    return out_path


def main() -> None:
    parser = argparse.ArgumentParser(description="Parent Feedback Agent - Interprets shooting_drill_feedback.py JSON output")
    parser.add_argument("json_path", help="Path to drill feedback JSON file")
    parser.add_argument("--model", default="gemini-2.5-flash-lite", help="Gemini model name")
    parser.add_argument("--temperature", type=float, default=0.1)
    parser.add_argument("--max_tokens", type=int, default=256)
    args = parser.parse_args()

    source_path = Path(args.json_path)
    if not source_path.exists():
        raise FileNotFoundError(f"JSON not found: {source_path}")
    
    result = load_feedback_json(source_path)

    # Always use Gemini - no fallback
    summary = generate_summary_with_gemini(
        result,
        model_name=args.model,
        temperature=args.temperature,
        max_output_tokens=args.max_tokens,
    )

    out_path = save_summary_text(source_path, summary)
    print(summary)
    print(f"\nSaved: {out_path}")


if __name__ == "__main__":
    main()


